{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankit\\\\OneDrive\\\\Desktop\\\\crypto_tracker\\\\crypto_tracker\\\\src\\\\Components\\\\CoinChart\\\\CoinChart.jsx\",\n    _s = $RefreshSig$();\n\nimport { CircularProgress } from \"@mui/material\";\nimport \"./CoinChart.css\";\nimport { useContext, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Line } from \"react-chartjs-2\";\nimport { HistoricalChart } from \"../../Config/api\";\nimport { CryptoState } from \"../../CryptoContext/CryptoContext\";\nimport axios from \"axios\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CoinChart = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    id\n  } = useParams();\n  const {\n    currency,\n    symbol\n  } = useContext(CryptoState);\n  const [coinChart, setCoinChart] = useState();\n  const [day, setDay] = useState(1);\n\n  const fetchCoinChart = async () => {\n    try {\n      const {\n        data\n      } = await new Promise(res => {\n        setTimeout(() => {\n          res(axios.get(HistoricalChart(id, day, currency)));\n        }, 1);\n      });\n      setCoinChart(data);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  console.log(coinChart);\n  useEffect(() => {\n    setIsLoading(true);\n    fetchCoinChart();\n    setIsLoading(false);\n  }, [currency, day]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"coin_chart\",\n    children: isLoading ? CoinChart( /*#__PURE__*/_jsxDEV(CircularProgress, {\n      style: {\n        Color: \"gold\"\n      },\n      size: 250,\n      thickness: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CoinChart, \"ACaI8/INCfOE+523i4MC+uOW0pw=\", false, function () {\n  return [useParams];\n});\n\n_c = CoinChart;\nexport default CoinChart;\nconst Chart = styled.div``;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoinChart\");","map":{"version":3,"sources":["C:/Users/ankit/OneDrive/Desktop/crypto_tracker/crypto_tracker/src/Components/CoinChart/CoinChart.jsx"],"names":["CircularProgress","useContext","useEffect","useState","styled","Line","HistoricalChart","CryptoState","axios","useParams","CoinChart","isLoading","setIsLoading","id","currency","symbol","coinChart","setCoinChart","day","setDay","fetchCoinChart","data","Promise","res","setTimeout","get","err","console","error","log","Color","Chart","div"],"mappings":";;;AAAA,SAASA,gBAAT,QAAiC,eAAjC;AACA,OAAO,iBAAP;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,QAAhC,QAAgD,OAAhD;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,SAASC,WAAT,QAA4B,mCAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,kBAA1B;;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAEU,IAAAA;AAAF,MAASJ,SAAS,EAAxB;AACA,QAAM;AAAEK,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAuBd,UAAU,CAACM,WAAD,CAAvC;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,EAA1C;AACA,QAAM,CAACe,GAAD,EAAMC,MAAN,IAAgBhB,QAAQ,CAAC,CAAD,CAA9B;;AAEA,QAAMiB,cAAc,GAAG,YAAY;AACjC,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAM,IAAIC,OAAJ,CAAaC,GAAD,IAAS;AAC1CC,QAAAA,UAAU,CAAC,MAAM;AACfD,UAAAA,GAAG,CAACf,KAAK,CAACiB,GAAN,CAAUnB,eAAe,CAACO,EAAD,EAAKK,GAAL,EAAUJ,QAAV,CAAzB,CAAD,CAAH;AACD,SAFS,EAEP,CAFO,CAAV;AAGD,OAJsB,CAAvB;AAKAG,MAAAA,YAAY,CAACI,IAAD,CAAZ;AACD,KAPD,CAOE,OAAOK,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD;AACF,GAXD;;AAYAC,EAAAA,OAAO,CAACE,GAAR,CAAYb,SAAZ;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAQ,IAAAA,cAAc;AACdR,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAJQ,EAIN,CAACE,QAAD,EAAWI,GAAX,CAJM,CAAT;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,cACGP,SAAS,GACRD,SAAS,eACP,QAAC,gBAAD;AACE,MAAA,KAAK,EAAE;AAAEoB,QAAAA,KAAK,EAAE;AAAT,OADT;AAEE,MAAA,IAAI,EAAE,GAFR;AAGE,MAAA,SAAS,EAAE;AAHb;AAAA;AAAA;AAAA;AAAA,YADO,CADD,gBASR;AAVJ;AAAA;AAAA;AAAA;AAAA,UADF;AA2BD,CAtDD;;GAAMpB,S;UAEWD,S;;;KAFXC,S;AAuDN,eAAeA,SAAf;AACA,MAAMqB,KAAK,GAAG3B,MAAM,CAAC4B,GAAI,EAAzB","sourcesContent":["import { CircularProgress } from \"@mui/material\";\r\nimport \"./CoinChart.css\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { HistoricalChart } from \"../../Config/api\";\r\nimport { CryptoState } from \"../../CryptoContext/CryptoContext\";\r\nimport axios from \"axios\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst CoinChart = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const { id } = useParams();\r\n  const { currency, symbol } = useContext(CryptoState);\r\n  const [coinChart, setCoinChart] = useState();\r\n  const [day, setDay] = useState(1);\r\n\r\n  const fetchCoinChart = async () => {\r\n    try {\r\n      const { data } = await new Promise((res) => {\r\n        setTimeout(() => {\r\n          res(axios.get(HistoricalChart(id, day, currency)));\r\n        }, 1);\r\n      });\r\n      setCoinChart(data);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n  console.log(coinChart);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchCoinChart();\r\n    setIsLoading(false);\r\n  }, [currency, day]);\r\n\r\n  return (\r\n    <div className=\"coin_chart\">\r\n      {isLoading ? (\r\n        CoinChart(\r\n          <CircularProgress\r\n            style={{ Color: \"gold\" }}\r\n            size={250}\r\n            thickness={1}\r\n          ></CircularProgress>\r\n        )\r\n      ) : (\r\n        <>\r\n          {/* <Line\r\n           data={{\r\n              labels: coinChart.prices.map((coin) => {\r\n                let date = new Date(coin[0]);\r\n                let time =\r\n                  date.getHours() > 12\r\n                    ? `${date.getHours() - 12}:${date.getMinutes()} PM`\r\n                    : `${date.getHours()}:${date.getMinutes()} AM`;\r\n              }),\r\n            }}\r\n          /> */}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default CoinChart;\r\nconst Chart = styled.div``;\r\n"]},"metadata":{},"sourceType":"module"}