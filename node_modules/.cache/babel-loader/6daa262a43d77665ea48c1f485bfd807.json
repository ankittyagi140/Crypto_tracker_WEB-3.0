{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankit\\\\OneDrive\\\\Desktop\\\\crypto_tracker\\\\crypto_tracker\\\\src\\\\Components\\\\Hoc\\\\HocMillion.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HocMillion = NewComponent => {\n  const HighOrderFunction = () => {\n    var _coinData, _coinData$market_data, _coinData$market_data2;\n\n    const num = (_coinData = coinData) === null || _coinData === void 0 ? void 0 : (_coinData$market_data = _coinData.market_data) === null || _coinData$market_data === void 0 ? void 0 : (_coinData$market_data2 = _coinData$market_data.ath) === null || _coinData$market_data2 === void 0 ? void 0 : _coinData$market_data2.usd;\n\n    if (num > 999 && num < 1000000) {\n      return (num / 1000).toFixed(2) + \"K\"; // convert to K for number from > 1000 < 1 million\n    } else if (num > 1000000) {\n      return (num / 1000000).toFixed(2) + \"M\"; // convert to M for number from > 1 million\n    } else if (num < 900) {\n      return num; // if value < 1000, nothing to do\n    }\n\n    return /*#__PURE__*/_jsxDEV(NewComponent, {\n      name: \"ankit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 12\n    }, this);\n  };\n\n  return HighOrderFunction;\n};\n\n_c = HocMillion;\nexport default HocMillion; //coinData?.market_data?.ath?.usd\n\nvar _c;\n\n$RefreshReg$(_c, \"HocMillion\");","map":{"version":3,"sources":["C:/Users/ankit/OneDrive/Desktop/crypto_tracker/crypto_tracker/src/Components/Hoc/HocMillion.jsx"],"names":["HocMillion","NewComponent","HighOrderFunction","num","coinData","market_data","ath","usd","toFixed"],"mappings":";;;AACA,MAAMA,UAAU,GAAIC,YAAD,IAAkB;AACnC,QAAMC,iBAAiB,GAAG,MAAM;AAAA;;AAC5B,UAAMC,GAAG,gBAAGC,QAAH,uEAAG,UAAUC,WAAb,oFAAG,sBAAuBC,GAA1B,2DAAG,uBAA4BC,GAAxC;;AACF,QAAIJ,GAAG,GAAG,GAAN,IAAaA,GAAG,GAAG,OAAvB,EAAgC;AAC5B,aAAO,CAACA,GAAG,GAAG,IAAP,EAAaK,OAAb,CAAqB,CAArB,IAA0B,GAAjC,CAD4B,CACU;AACvC,KAFH,MAES,IAAIL,GAAG,GAAG,OAAV,EAAmB;AACxB,aAAO,CAACA,GAAG,GAAG,OAAP,EAAgBK,OAAhB,CAAwB,CAAxB,IAA6B,GAApC,CADwB,CACiB;AAC1C,KAFM,MAEA,IAAIL,GAAG,GAAG,GAAV,EAAe;AACpB,aAAOA,GAAP,CADoB,CACR;AACb;;AACH,wBAAO,QAAC,YAAD;AAAc,MAAA,IAAI,EAAC;AAAnB;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAVD;;AAWA,SAAOD,iBAAP;AACD,CAbD;;KAAMF,U;AAcN,eAAeA,UAAf,C,CACA","sourcesContent":["\r\nconst HocMillion = (NewComponent) => {\r\n  const HighOrderFunction = () => {\r\n      const num = coinData?.market_data?.ath?.usd;\r\n    if (num > 999 && num < 1000000) {\r\n        return (num / 1000).toFixed(2) + \"K\"; // convert to K for number from > 1000 < 1 million\r\n      } else if (num > 1000000) {\r\n        return (num / 1000000).toFixed(2) + \"M\"; // convert to M for number from > 1 million\r\n      } else if (num < 900) {\r\n        return num; // if value < 1000, nothing to do\r\n      }\r\n    return <NewComponent name=\"ankit\" ></NewComponent>;\r\n  };\r\n  return HighOrderFunction;\r\n};\r\nexport default HocMillion;\r\n//coinData?.market_data?.ath?.usd"]},"metadata":{},"sourceType":"module"}