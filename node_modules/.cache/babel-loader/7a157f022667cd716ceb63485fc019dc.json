{"ast":null,"code":"import _objectWithoutProperties from \"C:/Users/ankit/OneDrive/Desktop/crypto_tracker/crypto_tracker/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"C:/Users/ankit/OneDrive/Desktop/crypto_tracker/crypto_tracker/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _excluded = [\"height\", \"width\", \"redraw\", \"datasetIdKey\", \"type\", \"data\", \"options\", \"plugins\", \"fallbackContent\"];\nimport React, { forwardRef, useRef, useEffect } from 'react';\nimport { Chart as Chart$1, LineController, BarController, RadarController, DoughnutController, PolarAreaController, BubbleController, PieController, ScatterController } from 'chart.js';\nvar defaultDatasetIdKey = 'label';\n\nfunction reforwardRef(ref, value) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nfunction setOptions(chart, nextOptions) {\n  chart.options = _objectSpread({}, nextOptions);\n}\n\nfunction setLabels(currentData, nextLabels) {\n  currentData.labels = nextLabels;\n}\n\nfunction setDatasets(currentData, nextDatasets) {\n  var datasetIdKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultDatasetIdKey;\n  var addedDatasets = [];\n  currentData.datasets = nextDatasets.map(function (nextDataset) {\n    // given the new set, find it's current match\n    var currentDataset = currentData.datasets.find(function (dataset) {\n      return dataset[datasetIdKey] === nextDataset[datasetIdKey];\n    }); // There is no original to update, so simply add new one\n\n    if (!currentDataset || !nextDataset.data || addedDatasets.includes(currentDataset)) {\n      return _objectSpread({}, nextDataset);\n    }\n\n    addedDatasets.push(currentDataset);\n    Object.assign(currentDataset, nextDataset);\n    return currentDataset;\n  });\n}\n\nfunction cloneData(data) {\n  var datasetIdKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultDatasetIdKey;\n  var nextData = {\n    labels: [],\n    datasets: []\n  };\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n  return nextData;\n}\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\n\n\nfunction getDatasetAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event.nativeEvent, 'dataset', {\n    intersect: true\n  }, false);\n}\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\n\n\nfunction getElementAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event.nativeEvent, 'nearest', {\n    intersect: true\n  }, false);\n}\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\n\n\nfunction getElementsAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event.nativeEvent, 'index', {\n    intersect: true\n  }, false);\n}\n\nfunction ChartComponent(param, ref) {\n  var _param$height = param.height,\n      height = _param$height === void 0 ? 150 : _param$height,\n      _param$width = param.width,\n      width = _param$width === void 0 ? 300 : _param$width,\n      _param$redraw = param.redraw,\n      redraw = _param$redraw === void 0 ? false : _param$redraw,\n      datasetIdKey = param.datasetIdKey,\n      type = param.type,\n      data = param.data,\n      options = param.options,\n      _param$plugins = param.plugins,\n      plugins = _param$plugins === void 0 ? [] : _param$plugins,\n      fallbackContent = param.fallbackContent,\n      props = _objectWithoutProperties(param, _excluded);\n\n  var canvasRef = useRef(null);\n  var chartRef = useRef();\n\n  var renderChart = function renderChart() {\n    if (!canvasRef.current) return;\n    chartRef.current = new Chart$1(canvasRef.current, {\n      type: type,\n      data: cloneData(data, datasetIdKey),\n      options: options,\n      plugins: plugins\n    });\n    reforwardRef(ref, chartRef.current);\n  };\n\n  var destroyChart = function destroyChart() {\n    reforwardRef(ref, null);\n\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n\n  useEffect(function () {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n  useEffect(function () {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n  useEffect(function () {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n  useEffect(function () {\n    if (!chartRef.current) return;\n\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update();\n    }\n  }, [redraw, options, data.labels, data.datasets]);\n  useEffect(function () {\n    renderChart();\n    return function () {\n      return destroyChart();\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"canvas\", Object.assign({\n    ref: canvasRef,\n    role: \"img\",\n    height: height,\n    width: width\n  }, props), fallbackContent);\n}\n\nvar Chart = /*#__PURE__*/forwardRef(ChartComponent);\n\nfunction createTypedChart(type, registerables) {\n  Chart$1.register(registerables);\n  return /*#__PURE__*/forwardRef(function (props, ref) {\n    return /*#__PURE__*/React.createElement(Chart, Object.assign({}, props, {\n      ref: ref,\n      type: type\n    }));\n  });\n}\n\nvar Line = /* #__PURE__ */createTypedChart('line', LineController);\nvar Bar = /* #__PURE__ */createTypedChart('bar', BarController);\nvar Radar = /* #__PURE__ */createTypedChart('radar', RadarController);\nvar Doughnut = /* #__PURE__ */createTypedChart('doughnut', DoughnutController);\nvar PolarArea = /* #__PURE__ */createTypedChart('polarArea', PolarAreaController);\nvar Bubble = /* #__PURE__ */createTypedChart('bubble', BubbleController);\nvar Pie = /* #__PURE__ */createTypedChart('pie', PieController);\nvar Scatter = /* #__PURE__ */createTypedChart('scatter', ScatterController);\nexport { Bar, Bubble, Chart, Doughnut, Line, Pie, PolarArea, Radar, Scatter, getDatasetAtEvent, getElementAtEvent, getElementsAtEvent };","map":{"version":3,"mappings":"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","names":["defaultDatasetIdKey","reforwardRef","ref","value","current","setOptions","chart","nextOptions","options","setLabels","currentData","nextLabels","labels","setDatasets","nextDatasets","datasetIdKey","addedDatasets","datasets","map","nextDataset","currentDataset","find","dataset","data","includes","push","Object","assign","cloneData","nextData","getDatasetAtEvent","event","getElementsAtEventForMode","nativeEvent","intersect","getElementAtEvent","getElementsAtEvent","ChartComponent","param","height","width","redraw","type","plugins","fallbackContent","props","canvasRef","useRef","chartRef","renderChart","ChartJS","destroyChart","destroy","useEffect","config","setTimeout","update","canvas","role","Chart","forwardRef","createTypedChart","registerables","register","Line","LineController","Bar","BarController","Radar","RadarController","Doughnut","DoughnutController","PolarArea","PolarAreaController","Bubble","BubbleController","Pie","PieController","Scatter","ScatterController"],"sources":["C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\node_modules\\react-chartjs-2\\src\\utils.ts","C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\node_modules\\react-chartjs-2\\src\\chart.tsx","C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\node_modules\\react-chartjs-2\\src\\typedCharts.tsx"],"sourcesContent":["import type { MouseEvent } from 'react';\nimport type {\n  ChartType,\n  ChartData,\n  DefaultDataPoint,\n  ChartDataset,\n  ChartOptions,\n  Chart,\n} from 'chart.js';\n\nimport type { ForwardedRef } from './types';\n\nconst defaultDatasetIdKey = 'label';\n\nexport function reforwardRef<T>(ref: ForwardedRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nexport function setOptions<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: Chart<TType, TData, TLabel>, nextOptions: ChartOptions<TType>) {\n  chart.options = { ...nextOptions };\n}\n\nexport function setLabels<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextLabels: TLabel[] | undefined\n) {\n  currentData.labels = nextLabels;\n}\n\nexport function setDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextDatasets: ChartDataset<TType, TData>[],\n  datasetIdKey = defaultDatasetIdKey\n) {\n  const addedDatasets: ChartDataset<TType, TData>[] = [];\n\n  currentData.datasets = nextDatasets.map(nextDataset => {\n    // given the new set, find it's current match\n    const currentDataset = currentData.datasets.find(\n      dataset => dataset[datasetIdKey] === nextDataset[datasetIdKey]\n    );\n\n    // There is no original to update, so simply add new one\n    if (\n      !currentDataset ||\n      !nextDataset.data ||\n      addedDatasets.includes(currentDataset)\n    ) {\n      return { ...nextDataset };\n    }\n\n    addedDatasets.push(currentDataset);\n\n    Object.assign(currentDataset, nextDataset);\n\n    return currentDataset;\n  });\n}\n\nexport function cloneData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(data: ChartData<TType, TData, TLabel>, datasetIdKey = defaultDatasetIdKey) {\n  const nextData: ChartData<TType, TData, TLabel> = {\n    labels: [],\n    datasets: [],\n  };\n\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n\n  return nextData;\n}\n\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getDatasetAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'dataset',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'nearest',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementsAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'index',\n    { intersect: true },\n    false\n  );\n}\n","import React, { useEffect, useRef, forwardRef } from 'react';\nimport { Chart as ChartJS } from 'chart.js';\nimport type { ChartType, DefaultDataPoint } from 'chart.js';\n\nimport type { ForwardedRef, ChartProps, TypedChartComponent } from './types';\nimport {\n  reforwardRef,\n  cloneData,\n  setOptions,\n  setLabels,\n  setDatasets,\n} from './utils';\n\nfunction ChartComponent<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  {\n    height = 150,\n    width = 300,\n    redraw = false,\n    datasetIdKey,\n    type,\n    data,\n    options,\n    plugins = [],\n    fallbackContent,\n    ...props\n  }: ChartProps<TType, TData, TLabel>,\n  ref: ForwardedRef<ChartJS<TType, TData, TLabel>>\n) {\n  type TypedChartJS = ChartJS<TType, TData, TLabel>;\n\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const chartRef = useRef<TypedChartJS | null>();\n\n  const renderChart = () => {\n    if (!canvasRef.current) return;\n\n    chartRef.current = new ChartJS(canvasRef.current, {\n      type,\n      data: cloneData(data, datasetIdKey),\n      options,\n      plugins,\n    });\n\n    reforwardRef(ref, chartRef.current);\n  };\n\n  const destroyChart = () => {\n    reforwardRef(ref, null);\n\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update();\n    }\n  }, [redraw, options, data.labels, data.datasets]);\n\n  useEffect(() => {\n    renderChart();\n\n    return () => destroyChart();\n  }, []);\n\n  return (\n    <canvas ref={canvasRef} role='img' height={height} width={width} {...props}>\n      {fallbackContent}\n    </canvas>\n  );\n}\n\nexport const Chart = forwardRef(ChartComponent) as TypedChartComponent;\n","import React, { forwardRef } from 'react';\nimport {\n  Chart as ChartJS,\n  LineController,\n  BarController,\n  RadarController,\n  DoughnutController,\n  PolarAreaController,\n  BubbleController,\n  PieController,\n  ScatterController,\n} from 'chart.js';\nimport type { ChartType, ChartComponentLike } from 'chart.js';\n\nimport type {\n  ChartProps,\n  ChartJSOrUndefined,\n  TypedChartComponent,\n} from './types';\nimport { Chart } from './chart';\n\nfunction createTypedChart<T extends ChartType>(\n  type: T,\n  registerables: ChartComponentLike\n) {\n  ChartJS.register(registerables);\n\n  return forwardRef<ChartJSOrUndefined<T>, Omit<ChartProps<T>, 'type'>>(\n    (props, ref) => <Chart {...props} ref={ref} type={type} />\n  ) as TypedChartComponent<T, true>;\n}\n\nexport const Line = /* #__PURE__ */ createTypedChart('line', LineController);\n\nexport const Bar = /* #__PURE__ */ createTypedChart('bar', BarController);\n\nexport const Radar = /* #__PURE__ */ createTypedChart('radar', RadarController);\n\nexport const Doughnut = /* #__PURE__ */ createTypedChart(\n  'doughnut',\n  DoughnutController\n);\n\nexport const PolarArea = /* #__PURE__ */ createTypedChart(\n  'polarArea',\n  PolarAreaController\n);\n\nexport const Bubble = /* #__PURE__ */ createTypedChart(\n  'bubble',\n  BubbleController\n);\n\nexport const Pie = /* #__PURE__ */ createTypedChart('pie', PieController);\n\nexport const Scatter = /* #__PURE__ */ createTypedChart(\n  'scatter',\n  ScatterController\n);\n"]},"metadata":{},"sourceType":"module"}