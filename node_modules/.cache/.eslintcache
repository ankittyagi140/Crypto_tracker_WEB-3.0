[{"C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\index.js":"1","C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\App.js":"2","C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\Pages\\Home\\Home.jsx":"3","C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\Pages\\Detail\\Detail.js":"4","C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\Components\\Header\\Header.js":"5","C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\CryptoContext\\CryptoContext.jsx":"6","C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\Components\\Banner\\Banner.jsx":"7","C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\Components\\Carousel\\Carousel.jsx":"8","C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\Config\\api.js":"9","C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\Components\\CoinList\\CoinLIst.jsx":"10","C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\Components\\CoinList\\CoinList.jsx":"11","C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\Pages\\Transfer\\Transfer.jsx":"12","C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\Pages\\ComingSoon\\ComingSoon.jsx":"13","C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\Components\\CoinChart\\CoinChart.jsx":"14","C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\Components\\CoinDetails\\CoinDetails.jsx":"15","C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\Components\\Hoc\\HocMillion.jsx":"16","C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\Config\\Data.js":"17","C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\Components\\SelectedButton\\SelectedButton.jsx":"18"},{"size":324,"mtime":1647870766326,"results":"19","hashOfConfig":"20"},{"size":936,"mtime":1647870971216,"results":"21","hashOfConfig":"20"},{"size":245,"mtime":1647591639721,"results":"22","hashOfConfig":"20"},{"size":2099,"mtime":1647871045697,"results":"23","hashOfConfig":"20"},{"size":1783,"mtime":1647753646387,"results":"24","hashOfConfig":"20"},{"size":568,"mtime":1647498959449,"results":"25","hashOfConfig":"20"},{"size":510,"mtime":1647721995609,"results":"26","hashOfConfig":"20"},{"size":3085,"mtime":1647839882946,"results":"27","hashOfConfig":"20"},{"size":633,"mtime":1647841359834,"results":"28","hashOfConfig":"20"},{"size":4577,"mtime":1647623631315,"results":"29","hashOfConfig":"20"},{"size":7071,"mtime":1647872211963,"results":"30","hashOfConfig":"20"},{"size":1563,"mtime":1647753639777,"results":"31","hashOfConfig":"20"},{"size":127,"mtime":1647712006153,"results":"32","hashOfConfig":"20"},{"size":2664,"mtime":1647869999382,"results":"33","hashOfConfig":"20"},{"size":635,"mtime":1647871950349,"results":"34","hashOfConfig":"20"},{"size":697,"mtime":1647858372243,"results":"35","hashOfConfig":"20"},{"size":219,"mtime":1647861065147,"results":"36","hashOfConfig":"20"},{"size":238,"mtime":1647866323297,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1g6cydh",{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"47"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\index.js",[],[],"C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\App.js",[],[],"C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\Pages\\Home\\Home.jsx",[],[],["97","98"],"C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\Pages\\Detail\\Detail.js",["99","100"],[],"import \"./Detail.css\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { SingleCoin } from \"../../Config/api\";\r\nimport { LinearProgress } from \"@mui/material\";\r\nimport CoinChart from \"../../Components/CoinChart/CoinChart\";\r\nimport CoinDetails from \"../../Components/CoinDetails/CoinDetails\";\r\nimport { CryptoState } from \"../../CryptoContext/CryptoContext\";\r\n\r\nconst Detail = ({ props }) => {\r\n  const [coinData, setCoinData] = useState();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const { id } = useParams();\r\n  const { currency, symbol } = useContext(CryptoState);\r\n\r\n  const fetchCoinDetails = async (id) => {\r\n    const { data } = await new Promise((res) => {\r\n      res(axios.get(SingleCoin(id)));\r\n    });\r\n    setCoinData(data);\r\n  };\r\n\r\n  const numFormatter = (num) => {\r\n    if (num > 999 && num < 1000000) {\r\n      return (num / 1000).toFixed(2) + \"K\"; // convert to K for number from > 1000 < 1 million\r\n    } else if (num > 1000000) {\r\n      return (num / 1000000).toFixed(2) + \"M\"; // convert to M for number from > 1 million\r\n    } else if (num < 900) {\r\n      return num; // if value < 1000, nothing to do\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchCoinDetails(id);\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"info_container\">\r\n      <div className=\"heading\">\r\n        <span className=\"font_sw\">\r\n          Current price: {symbol} {coinData?.market_data?.current_price?.usd}\r\n        </span>\r\n        <span>\r\n          Market Cap: {numFormatter(coinData?.market_data?.market_cap?.usd)}\r\n        </span>\r\n        <span>\r\n          ATH: {symbol} {coinData?.market_data?.ath?.usd}\r\n        </span>\r\n      </div>\r\n      {isLoading ? (\r\n        <LinearProgress style={{ color: \"gold\" }}></LinearProgress>\r\n      ) : (\r\n        <div className=\"main_container\">\r\n          <CoinDetails coinData={coinData} />\r\n          <CoinChart coinData={coinData} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Detail;\r\n","C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\Components\\Header\\Header.js",[],[],"C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\CryptoContext\\CryptoContext.jsx",["101"],[],"import { useState, createContext, useContext, useEffect } from \"react\";\r\nexport const CryptoState = createContext();\r\n\r\nconst CryptoContext = ({ children }) => {\r\n  const [currency, setCurrency] = useState(\"USD\");\r\n  const [symbol, setSymbol] = useState(\"$\");\r\n  useEffect(() => {\r\n    if (currency === \"INR\") {\r\n      setSymbol(\"RS\");\r\n    } else if (currency === \"USD\") {\r\n      setSymbol(\"$\");\r\n    }\r\n  }, [currency]);\r\n  return <CryptoState.Provider value={{currency,symbol,setCurrency}}>{children}</CryptoState.Provider>;\r\n};\r\nexport default CryptoContext;\r\n\r\n\r\n","C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\Components\\Banner\\Banner.jsx",[],[],"C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\Components\\Carousel\\Carousel.jsx",[],[],"C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\Config\\api.js",[],[],"C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\Components\\CoinList\\CoinLIst.jsx",[],[],"C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\Components\\CoinList\\CoinList.jsx",["102","103","104"],[],"import { useContext, useEffect, useState } from \"react\";\r\nimport { CryptoState } from \"../../CryptoContext/CryptoContext\";\r\nimport { CoinData } from \"../../Config/api\";\r\nimport axios from \"axios\";\r\nimport \"./CoinList.css\";\r\nimport {\r\n  Container,\r\n  LinearProgress,\r\n  Pagination,\r\n  Tab,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport styled from \"@emotion/styled\";\r\n\r\n\r\nconst CoinList = () => {\r\n  const { currency, symbol } = useContext(CryptoState);\r\n  const [coinSummary, setCoinSummary] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [search, setSearch] = useState(\"\");\r\n  const navigate = useNavigate();\r\n  let [page, setPage] = useState(1);\r\n  let [coinCount, setCoinCount] = useState(0);\r\n\r\n  const fetchCoinData = async (currency) => {\r\n    const { data } = await new Promise((res, rej) => {\r\n      setTimeout(() => {\r\n        try {\r\n          res(axios.get(CoinData(currency)));\r\n        } catch (err) {\r\n          console.error(err);\r\n        }\r\n      }, 10);\r\n    });\r\n    setCoinSummary(data);\r\n  };\r\n  const handelSearch = () => {\r\n    return coinSummary.filter(\r\n      (coin) =>\r\n        coin.name.toLowerCase().includes(search.toLocaleLowerCase()) ||\r\n        coin.symbol.toLowerCase().includes(search.toLocaleLowerCase())\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    fetchCoinData(currency);\r\n    setLoading(false);\r\n  }, [currency]);\r\n\r\n  const numFormatter = (num) => {\r\n    if (num > 999 && num < 1000000) {\r\n      return (num / 1000).toFixed(2) + \"K\"; // convert to K for number from > 1000 < 1 million\r\n    } else if (num > 1000000) {\r\n      return (num / 1000000).toFixed(2) + \"M\"; // convert to M for number from > 1 million\r\n    } else if (num < 900) {\r\n      return num; // if value < 1000, nothing to do\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ backgroundColor: \"#ffffff\" }}>\r\n      <Container className=\"coin_summary_contaner\">\r\n        <p\r\n          style={{\r\n            margin: \"15px 0 10px 0px\",\r\n            fontFamily: \"Montserrat\",\r\n            fontSize: \"32px\",\r\n            fontWeight: \"600\",\r\n            color: \"#006f8f\",\r\n          }}\r\n        >\r\n          Get details of your coins with market cap\r\n        </p>\r\n        <TextField\r\n          style={{ margin: \"20px\", width: \"100%\" }}\r\n          varient=\"outlined\"\r\n          label=\"Search for you favourite coin..\"\r\n          onChange={(e) => {\r\n            setSearch(e.target.value);\r\n          }}\r\n        />\r\n        <TableContainer>\r\n          {loading ? (\r\n            <LinearProgress\r\n              style={{ backgroundColor: \"gold\" }}\r\n            ></LinearProgress>\r\n          ) : (\r\n            <Table>\r\n              <TableHead style={{ backgroundColor: \"#EEBC1D\" }}>\r\n                <TableRow>\r\n                  {[\r\n                    \"Rank\",\r\n                    \"Coin\",\r\n                    \"Price\",\r\n                    \"24Hrs-Change-%\",\r\n                    `Market Cap ${symbol}`,\r\n                  ].map((element) => {\r\n                    return (\r\n                      <TableCell\r\n                        style={{\r\n                          color: \"black\",\r\n                          fontWeight: \"700\",\r\n                          fontFamily: \"Montserrat\",\r\n                        }}\r\n                        key={element}\r\n                        //align={element === \"coin\" ? \"\" : \"right\"}\r\n                      >\r\n                        {element}\r\n                      </TableCell>\r\n                    );\r\n                  })}\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {handelSearch()\r\n                  .map((row) => {\r\n                    const profit = row?.price_change_percentage_24h;\r\n                    return (\r\n                      <TableRow\r\n                        key={row.id}\r\n                        onClick={() => {\r\n                          navigate(`coins/${row?.id}`);\r\n                        }}\r\n                      >\r\n                        <TableCell component=\"th\" scope=\"row\">\r\n                          {row?.market_cap_rank}\r\n                        </TableCell>\r\n                        <TableCell\r\n                          style={{\r\n                            display: \"flex\",\r\n                            gap: \"15\",\r\n                            flexDirection: \"row\",\r\n                            alignItems: \"center\",\r\n                            justifyContent: \"flex-start\",\r\n                          }}\r\n                        >\r\n                          <img\r\n                            src={row?.image}\r\n                            alt={row?.name}\r\n                            style={{ height: \"30px\" }}\r\n                          />\r\n                          <CoinName>\r\n                            <span\r\n                              style={{\r\n                                fontSize: \"12px\",\r\n                                fontWeight: \"600\",\r\n                              }}\r\n                            >\r\n                              {row?.name}\r\n                            </span>\r\n                          </CoinName>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <CoinPrice>\r\n                            <span style={{ fontSize: \"14px\" }}>\r\n                              {symbol}\r\n                              <span> {row?.current_price}</span>\r\n                            </span>\r\n                          </CoinPrice>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          {profit > 0 ? (\r\n                            <span\r\n                              style={{ color: \"green\" }}\r\n                            >{`+ ${profit}`}</span>\r\n                          ) : (\r\n                            <span style={{ color: \"red\" }}>{profit}</span>\r\n                          )}\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <span>{numFormatter(row?.market_cap)}</span>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })\r\n                  .slice((page - 1) * 10, (page - 1) * 10 + 10)}\r\n              </TableBody>\r\n            </Table>\r\n          )}\r\n        </TableContainer>\r\n        <Pagination\r\n          className=\"pagination_component\"\r\n          count={(handelSearch()?.length / 10)}\r\n          onChange={(_, value) => {\r\n            setPage(value);\r\n            window.scroll(0, 300);\r\n          }}\r\n        />\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\nexport default CoinList;\r\n\r\nconst CoinName = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  color: #ffffff;\r\n  margin: 5px;\r\n  font-size: 12px;\r\n`;\r\nconst CoinPrice = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  color: #ffffff;\r\n  margin: 5px;\r\n  font-size: 12px;\r\n`;\r\n","C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\Pages\\Transfer\\Transfer.jsx",[],[],"C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\Pages\\ComingSoon\\ComingSoon.jsx",[],[],"C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\Components\\CoinChart\\CoinChart.jsx",["105","106","107","108"],[],"import { CircularProgress } from \"@mui/material\";\r\nimport \"./CoinChart.css\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { HistoricalChart } from \"../../Config/api\";\r\nimport { CryptoState } from \"../../CryptoContext/CryptoContext\";\r\nimport axios from \"axios\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { Chart } from \"chart.js/auto\";\r\nimport { borderColor } from \"@mui/system\";\r\nimport { ChartDays } from \"../../Config/Data\";\r\nimport SelectedButton from \"../../Components/SelectedButton/SelectedButton\";\r\n\r\nconst CoinChart = () => {\r\n  const { id } = useParams();\r\n  const { currency, symbol } = useContext(CryptoState);\r\n  const [coinChart, setCoinChart] = useState();\r\n  const [day, setDay] = useState(1);\r\n\r\n  const fetchCoinChart = async () => {\r\n    try {\r\n      const { data } = await new Promise((res) => {\r\n        setTimeout(() => {\r\n          res(axios.get(HistoricalChart(id, day, currency)));\r\n        }, 1);\r\n      });\r\n      setCoinChart(data.prices);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchCoinChart();\r\n  }, [currency, day]);\r\n\r\n  return (\r\n    <div className=\"coin_chart\">\r\n      {!coinChart ? (\r\n        <CircularProgress style={{ color: \"gold\" }}></CircularProgress>\r\n      ) : (\r\n        <>\r\n          <Line\r\n            data={{\r\n              labels: coinChart.map((coin) => {\r\n                let date = new Date(coin[0]);\r\n                let time =\r\n                  date.getHours() > 12\r\n                    ? `${date.getHours() - 12}:${date.getMinutes()}AM`\r\n                    : `${date.getHours()}:${date.getMinutes()} PM`;\r\n                return day === 1 ? time : date.toLocaleDateString();\r\n              }),\r\n              datasets: [\r\n                {\r\n                  data: coinChart.map((coin) => coin[1]),\r\n                  label: `Price (Past ${day} Days) in ${currency}`,\r\n                  borderColor: \"#EEBC1D\",\r\n                },\r\n              ],\r\n              options: {\r\n                responsive: true,\r\n              },\r\n            }}\r\n          />\r\n          <div className=\"chart_bg\">\r\n            {ChartDays.map((day) => {\r\n              return (\r\n                <SelectedButton\r\n                  key={day.value}\r\n                  onClick={() => {\r\n                    setDay(day.value);\r\n                  }}\r\n                  selected={day.value === day}\r\n                >\r\n                  {day.label}\r\n                </SelectedButton>\r\n              );\r\n            })}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default CoinChart;\r\n","C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\Components\\CoinDetails\\CoinDetails.jsx",[],[],"C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\Components\\Hoc\\HocMillion.jsx",[],[],"C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\Config\\Data.js",[],[],"C:\\Users\\ankit\\OneDrive\\Desktop\\crypto_tracker\\crypto_tracker\\src\\Components\\SelectedButton\\SelectedButton.jsx",[],[],{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":15,"column":11,"nodeType":"115","messageId":"116","endLine":15,"endColumn":19},{"ruleId":"117","severity":1,"message":"118","line":38,"column":6,"nodeType":"119","endLine":38,"endColumn":8,"suggestions":"120"},{"ruleId":"113","severity":1,"message":"121","line":1,"column":35,"nodeType":"115","messageId":"116","endLine":1,"endColumn":45},{"ruleId":"113","severity":1,"message":"122","line":10,"column":3,"nodeType":"115","messageId":"116","endLine":10,"endColumn":6},{"ruleId":"113","severity":1,"message":"123","line":30,"column":8,"nodeType":"115","messageId":"116","endLine":30,"endColumn":17},{"ruleId":"113","severity":1,"message":"124","line":30,"column":19,"nodeType":"115","messageId":"116","endLine":30,"endColumn":31},{"ruleId":"113","severity":1,"message":"125","line":9,"column":10,"nodeType":"115","messageId":"116","endLine":9,"endColumn":15},{"ruleId":"113","severity":1,"message":"126","line":10,"column":10,"nodeType":"115","messageId":"116","endLine":10,"endColumn":21},{"ruleId":"113","severity":1,"message":"127","line":16,"column":21,"nodeType":"115","messageId":"116","endLine":16,"endColumn":27},{"ruleId":"117","severity":1,"message":"128","line":35,"column":6,"nodeType":"119","endLine":35,"endColumn":21,"suggestions":"129"},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"no-unused-vars","'currency' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["132"],"'useContext' is defined but never used.","'Tab' is defined but never used.","'coinCount' is assigned a value but never used.","'setCoinCount' is assigned a value but never used.","'Chart' is defined but never used.","'borderColor' is defined but never used.","'symbol' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchCoinChart'. Either include it or remove the dependency array.",["133"],"no-global-assign","no-unsafe-negation",{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},"Update the dependencies array to be: [id]",{"range":"138","text":"139"},"Update the dependencies array to be: [currency, day, fetchCoinChart]",{"range":"140","text":"141"},[1349,1351],"[id]",[1155,1170],"[currency, day, fetchCoinChart]"]